{% extends 'baseFront.html.twig' %}

{% block pageStyle %}
	<link href="{{ asset('css/blog.css') }}" rel="stylesheet">

	<style>
		/*heart */

		.heart-container {
			--heart-color: rgb(200, 0, 20, 20);
			position: relative;
			width: 40px;
			height: 40px;
			transition: 0.3s;

		}

		.heart-container .checkbox {
			position: absolute;
			width: 100%;
			height: 100%;
			opacity: 0;
			z-index: 20;
			cursor: pointer;
		}

		.heart-container .svg-container {
			width: 100%;
			height: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
		}

		.heart-container .svg-outline,
		.heart-container .svg-filled {
			fill: var(--heart-color);
			position: absolute;
		}

		.heart-container .svg-filled {
			animation: keyframes-svg-filled 1s;
			display: none;
		}

		.heart-container .svg-celebrate {
			position: absolute;
			animation: keyframes-svg-celebrate 0.5s;
			animation-fill-mode: forwards;
			display: none;
			stroke: var(--heart-color);
			fill: var(--heart-color);
			stroke-width: 2px;
		}

		.heart-container .checkbox:checked~.svg-container .svg-filled {
			display: block
		}

		.heart-container .checkbox:checked~.svg-container .svg-celebrate {
			display: block
		}

		@keyframes keyframes-svg-filled {
			0% {
				transform: scale(0);
			}

			25% {
				transform: scale(1.2);
			}

			50% {
				transform: scale(1);
				filter: brightness(1.5);
			}
		}

		@keyframes keyframes-svg-celebrate {
			0% {
				transform: scale(0);
			}

			50% {
				opacity: 1;
				filter: brightness(1.5);
			}

			100% {
				transform: scale(1.4);
				opacity: 0;
				display: none;
			}
		}

		/*button*/

		.button-card {
			--width: 150px;
			--height: 50px;
			--tooltip-height: 35px;
			--tooltip-width: 90px;
			--gap-between-tooltip-to-button: 18px;
			--button-color: #520f0f;
			--tooltip-color: #520f0f;
			width: var(--width);
			height: var(--height);
			background: var(--button-color);
			position: relative;
			text-align: center;
			border-radius: 0.5em;
			font-family: "Arial";
			transition: background 0.7s;
		}


		.text {
			display: flex;
			align-items: center;
			justify-content: center;
		}


		.button-card:hover {
			background: #b30000;
		}

		.button-card:hover .text {
			top: -100%;
		}

		.button-card:hover .icon {
			top: 0;
		}

		.button-card:hover:before,
		.button-card:hover:after {
			opacity: 1;
			visibility: visible;
		}

		.button-card:hover:after {
			bottom: calc(var(--height) + var(--gap-between-tooltip-to-button) - 20px);
		}

		.button-card:hover:before {
			bottom: calc(var(--height) + var(--gap-between-tooltip-to-button));
		}

		/*commentaire*/

		.cardcommentaire {
			width: 450px;
			height: fit-content;
			background-color: transparent;
			box-shadow: 0 187px 75px rgba(0, 0, 0, 0.01), 0 105px 63px rgba(0, 0, 0, 0.05), 0 47px 47px rgba(0, 0, 0, 0.09), 0 12px 26px rgba(0, 0, 0, 0.1), 0 0 0 rgba(0, 0, 0, 0.1);
			border-radius: 17px 17px 27px 27px;
			max-height: 400px;
			overflow-y: auto;
			scrollbar-width: thin;
			scrollbar-color: red;
		}


		.cardcommentaire::-webkit-scrollbar {
			width: 8px;
		}

		.cardcommentaire::-webkit-scrollbar-thumb {
			background-color: rebeccapurple;
			border-radius: 4px;
		}

		.cardcommentaire::-webkit-scrollbar-track {
			background-color: green;
		}

		.title {
			width: 100%;
			height: 50px;
			position: relative;
			display: flex;
			align-items: center;
			padding-left: 20px;
			border-bottom: 1px solid #f1f1f1;
			font-weight: 700;
			font-size: 13px;
			color: red;
		}

		.titlecommentatire::after {
			content: '';
			width: 8ch;
			height: 1px;
			position: absolute;
			bottom: -1px;
			background-color: red;
		}

		.comments {
			display: grid;
			grid-template-columns: 35px 1fr;
			gap: 20px;
			padding: 20px;
		}


		.comment-containercomment {
			flex-direction: column;
			gap: 15px;
			padding: 20px 50px 20px 20px;
			margin: 0;

		}

		.comment-containercomment .user {
			display: grid;
			grid-template-columns: 40px 1fr;
			gap: 10px;

		}

		.comment-containercomment .user .user-pic {
			width: 40px;
			height: 40px;
			position: relative;
			display: flex;
			align-items: center;
			justify-content: center;
			background-color: #f1f1f1;
			border-radius: 50%;

		}

		.comment-containercomment .user .user-pic:after {
			content: '';
			width: 9px;
			height: 9px;
			position: absolute;
			right: 0;
			bottom: 0;
			border-radius: 50%;
			background-color: #0fc45a;
			border: 2px solid #ffffff;

		}

		.comment-containercomment .user .user-info {
			width: 100%;
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			justify-content: center;
			gap: 3px;
		}

		.comment-containercomment .user .user-info span {
			font-weight: 700;
			font-size: 16px;
			color: red;
		}

		.comment-containercomment .user .user-info p {
			font-weight: 600;
			font-size: 15px;
			color: white;
		}

		.comment-containercomment .comment-content {
			font-size: 15px;
			line-height: 12px;
			font-weight: 600;
			color: white;
			padding: 5px;
		}

		.text-box {
			width: 100%;
			height: fit-content;
			background-color: #f1f1f1;
			padding: 8px;
		}

		.text-box .box-container {
			background-color: #ffffff;
			border-radius: 8px 8px 21px 21px;
			padding: 8px;
		}

		.text-box textarea {
			width: 100%;
			height: 40px;
			resize: none;
			border: 0;
			border-radius: 6px;
			padding: 12px 12px 10px;
			font-size: 13px;
			outline: none;
			caret-color: #0a84ff;
		}

		.text-box .formatting {
			display: grid;
			grid-template-columns: auto auto auto auto auto 1fr;
		}

		.text-box .formatting button {
			width: 30px;
			height: 30px;
			position: relative;
			display: flex;
			align-items: center;
			justify-content: center;
			background-color: transparent;
			border-radius: 50%;
			border: 0;
			outline: none;
		}

		.text-box .formatting button:hover {
			background-color: #f1f1f1;
		}

		.text-box .formatting .send {
			width: 30px;
			height: 30px;
			background-color: #0a84ff;
			margin: 0 0 0 auto;
		}

		.text-box .formatting .send:hover {
			background-color: #026eda;
		}

		@keyframes ripple {
			0% {
				transform: scale(0);
				opacity: 0.6;
			}

			100% {
				transform: scale(1);
				opacity: 0;
			}
		}


		/*button edite */
		.button-container {
			display: flex;

		}
		.editBtn {
			width: 30px;
			height: 30px;
			border-radius: 20px;
			border: none;
			background-color: rgb(93, 93, 116);
			display: flex;
			align-items: center;
			justify-content: center;
			box-shadow: 0 5px 10px rgba(0, 0, 0, 0.123);
			cursor: pointer;
			position: relative;
			overflow: hidden;
			transition: all 0.3s;


		}
		.editBtn::before {
			content: "";
			width: 200%;
			height: 200%;
			background-color: rgb(102, 102, 141);
			position: absolute;
			z-index: 1;
			transform: scale(0);
			transition: all 0.3s;
			border-radius: 50%;
			filter: blur(10px);
		}
		.editBtn:hover::before {
			transform: scale(1);
		}
		.editBtn:hover {
			box-shadow: 0 5px 10px rgba(0, 0, 0, 0.336);
		}

		.editBtn svg {
			height: 23px;
			fill: white;
			z-index: 3;
			transition: all 0.2s;
			transform-origin: bottom;
		}
		.editBtn:hover svg {
			transform: rotate(-15deg) translateX(5px);
		}
		.editBtn::after {
			content: "";
			width: 25px;
			height: 1.5px;
			position: absolute;
			bottom: 19px;
			left: -5px;
			background-color: white;
			border-radius: 2px;
			z-index: 2;
			transform: scaleX(0);
			transform-origin: left;
			transition: transform 0.5s ease-out;
		}
		.editBtn:hover::after {
			transform: scaleX(1);
			left: 0;
			transform-origin: right;
		}

		/* Delete Button */
		.deleteBtn {
			width: 30px;
			height: 30px;
			border-radius: 20px;
			border: none;
			background-color: rgb(93, 93, 116);
			display: flex;
			align-items: center;
			justify-content: center;
			box-shadow: 0 5px 10px rgba(0, 0, 0, 0.123);
			cursor: pointer;
			position: relative;
			overflow: hidden;
			transition: all 0.3s;
			margin-left: 10px;
		}
		.deleteBtn::before {
			content: "";
			width: 200%;
			height: 200%;
			background-color: rgb(102, 102, 141);
			position: absolute;
			z-index: 1;
			transform: scale(0);
			transition: all 0.3s;
			border-radius: 50%;
			filter: blur(10px);
		}
		.deleteBtn:hover::before {
			transform: scale(1);
		}
		.deleteBtn:hover {
			box-shadow: 0 5px 10px rgba(0, 0, 0, 0.336);
		}

		.deleteBtn svg {
			height: 23px;
			fill: white;
			z-index: 3;
			transition: all 0.2s;
			transform-origin: bottom;
		}
		.deleteBtn:hover svg {
			transform: rotate(-15deg) translateX(5px);
		}
		.deleteBtn::after {
			content: "";
			width: 25px;
			height: 1.5px;
			position: absolute;
			bottom: 19px;
			left: -5px;
			background-color: white;
			border-radius: 2px;
			z-index: 2;
			transform: scaleX(0);
			transform-origin: left;
			transition: transform 0.5s ease-out;
		}
		.deleteBtn:hover::after {
			transform: scaleX(1);
			left: 0;
			transform-origin: right;
		}

		/* The switch - the box around the slider */
		.comment-react {
			margin: 0 0 0 300px;
			display: flex;
			justify-content: center;
			align-items: center;
			padding: 5px;
			background-color: #f1f1f1;
			border-radius: 5px;
			scale: 1.5;
			width: 25px;
			height: 18px;
			align-items: center;
			position: relative;
		}

		.comment-react button {
			width: 3px;
			height: 3px;
			background-color: transparent;
			border: 0;
			outline: none;
			padding-top: -15px;
			position: absolute;
			left: -3px;
			top: -7px;
		}

		.comment-react button:after {
			content: "";
			background-color: #f5356e;
			width: 2px;
			height: 2px;
			left: -5px;
			top: -5px;
		}

		.comment-react button svg {
			position: relative;
			z-index: 9;
			width: 12px;
			height: 12px;
		}

		.comment-react button:hover:after {
			animation: ripple 0.6s ease-in-out forwards;
		}

		.comment-react button:hover svg {
			fill: #f5356e;
		}

		.comment-react button:hover svg path {
			stroke: #f5356e;
			fill: #f5356e;
		}

		.comment-react hr {
			width: 20%;
			height: 1px;
			background-color: #dfe1e6;
			margin: auto;
			border: 0;
		}

		.comment-react span {
			height: 10px;
			margin: auto;
			font-size: 12px;
			font-weight: 600;
			color: #707277;
			text-align: center;

		}

		@keyframes ripple {
			0% {
				transform: scale(0);
				opacity: 0.6;
			}

			100% {
				transform: scale(2);
				opacity: 0;
			}
		}

	</style>
{% endblock %}

{% block body %}
	<body>

		{{ block("header") }}

		<section id="center" class="center_o pt-2 pb-2">
			<div class="container-xl">
				<div class="row center_o1">
					<div class="col-md-5">
						<div class="center_o1l">
							<h2 class="mb-0">Blog</h2>
						</div>
					</div>
					<div class="col-md-7">
						<div class="center_o1r text-end">
							<h6 class="mb-0 col_red">
								<a href=>Home</a>
								<span class="me-2 ms-2 text-light">
									<i class="fa fa-caret-right align-middle"></i>
								</span>
								Blog
							</h6>
						</div>
					</div>
				</div>
			</div>
		</section>
		<section id="blog" class="pt-4 pb-4 bg_grey">
			<div class="container-xl">
				<div class="row">
					<div class="col-md-8">

						<div class="blog_1">
							<div class="blog_1l">
								{% set i = 0  %}
								<div class="blog_1l1">
									<div class="popular_2i1lm position-relative clearfix">
										<div class="popular_2i1lm1 clearfix">
											<div class="grid">
												<figure class="effect-jazz mb-0">
													<a href="{{ path('app_produit_show', {'idProduit': produit.idProduit}) }}">
														<img src="{{ asset(produit.image) }}" height="400" class="w-100" alt="img{{ produit.idProduit }}">
													</a>
												</figure>
											</div>
										</div>
									</div>
									<div class="blog_1l1i mt-4 col_red" style="font-size: 18px; font-family: Arial;">
										<h5>{{ produit.nom }}</h5>
										<h2 class="mt-4" style="font-size: 15px; word-wrap: break-word;">
											<a class="" href="{{ path('app_produit_show', {'idProduit': produit.idProduit}) }}">{{ produit.description }}</a>
										</h2>
										<p class="mt-4" style="font-size: 20px;">{{ produit.prix }}
											DT</p>
										<div>
											<div class="d-flex justify-content-between">
												{% set i = i + 1 %}
											</div>
										</div>
										<div class="input-group mb-3 ">
											<form action="{{ path('panier_add', { 'idProduit': produit.idProduit }) }}" method="post" onsubmit="return checkQuantity()">
												<input type="hidden" name="quantite" value="1">
												<button type="submit" class="button-card btn-primary" data-quantite="{{ produit.quantiteP }}" data-quantite-panier="" style="background: #520f0f; border-color: red;">Add To Cart</button>

											</form>

											<div class="heart-container ms-5" title="Like">
												<input type="checkbox" class="checkbox" id="Give-It-An-Id">
												<div class="svg-container">
													<svg viewbox="0 0 24 24" class="svg-outline" xmlns="http://www.w3.org/2000/svg">
														<path d="M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Zm-3.585,18.4a2.973,2.973,0,0,1-3.83,0C4.947,16.006,2,11.87,2,8.967a4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,11,8.967a1,1,0,0,0,2,0,4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,22,8.967C22,11.87,19.053,16.006,13.915,20.313Z"></path>
													</svg>
													<svg viewbox="0 0 24 24" class="svg-filled" xmlns="http://www.w3.org/2000/svg">
														<path d="M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Z"></path>
													</svg>
													<svg width="100" height="100" class="svg-celebrate" xmlns="http://www.w3.org/2000/svg">
														<polygon points="10,10 20,20"></polygon>
														<polygon points="10,50 20,50"></polygon>
														<polygon points="20,80 30,70"></polygon>
														<polygon points="90,10 80,20"></polygon>
														<polygon points="90,50 80,50"></polygon>
														<polygon points="80,80 70,70"></polygon>
													</svg>
												</div>
											</div>
										</div>
										<div></div>
									</div>
								</div>
							</div>
						</div>

					</div>
					<div class="col-md-4 bg_grey">
						<div class="cardcommentaire">
							<span class="title">Comments</span>

							{% for commentaire in commentaires %}


								<div class="comment-containercomment" data-comment-id="{{ commentaire.id }}">
									<div class="user">
										<img src="{{ asset(commentaire.idClient.photoDeProfil )}}" alt="Photo de profil" class="user-pic">
										<div class="user-info">
											<span>{{ commentaire.idClient.nom }}
												{{ commentaire.idClient.prenom }}</span>
										</div>
									</div>
									<br>

									<p class="comment-content">{{ commentaire.commentaire }}</p>

									<div class="button-container">
										<button class="editBtn">
											<svg height="1em" viewbox="0 0 512 512">
												<path d="M410.3 231l11.3-11.3-33.9-33.9-62.1-62.1L291.7 89.8l-11.3 11.3-22.6 22.6L58.6 322.9c-10.4 10.4-18 23.3-22.2 37.4L1 480.7c-2.5 8.4-.2 17.5 6.1 23.7s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L387.7 253.7 410.3 231zM160 399.4l-9.1 22.7c-4 3.1-8.5 5.4-13.3 6.9L59.4 452l23-78.1c1.4-4.9 3.8-9.4 6.9-13.3l22.7-9.1v32c0 8.8 7.2 16 16 16h32zM362.7 18.7L348.3 33.2 325.7 55.8 314.3 67.1l33.9 33.9 62.1 62.1 33.9 33.9 11.3-11.3 22.6-22.6 14.5-14.5c25-25 25-65.5 0-90.5L453.3 18.7c-25-25-65.5-25-90.5 0zm-47.4 168l-144 144c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l144-144c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z"></path>
											</svg>
										</button>
										<button class="deleteBtn">
											<svg class="delete-svgIcon" viewbox="0 0 448 512">
												<path d="M135.2 17.7L128 32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H320l-7.2-14.3C307.4 6.8 296.3 0 284.2 0H163.8c-12.1 0-23.2 6.8-28.6 17.7zM416 128H32L53.2 467c1.6 25.3 22.6 45 47.9 45H346.9c25.3 0 46.3-19.7 47.9-45L416 128z"></path>
											</svg>
										</button>
										<div class="comment-react">
											<button>
												<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewbox="0 0 24 24" fill="none">
													<path d="M19.4626 3.99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.53744 3.99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12 21C13.3412 21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.99415Z" stroke="#707277" stroke-width="2" stroke-linecap="round" fill="#707277"></path>
												</svg>
											</button>

											<span>14</span>
										</div>
									</div>

								</div>
							{% endfor %}

						</div>
					</div>

				</section>


				<div class="blog_1l3 mt-4">
					<h3>Leave a Comment</h3>
				</div>
				<div class="blog_1l6 mt-3">
					<div class="blog_1dt5 row mt-3">
						<div class="col-md-6">
							<div class="blog_1dt5l">
								{{ form_start(form, {'attr': {'class': 'comment-form', 'action': path('app_commentaire_produit_new', {'id': produit.idProduit}), 'method': 'POST'}}) }}


								{{ form_errors(form) }}


								{{ form_row(form.commentaire, {'attr': {'class': 'form-control form_text', 'placeholder': 'Comment'}}) }}


								<h6 class="mt-3 mb-0">
									<button type="submit" class="button">Comment</button>
								</h6>
								{{ form_end(form) }}
							</div>
						</div>
					</div>
				</div>


				{{ block("footer") }}

			 <script>
						            window.onscroll = function () {
						                myFunction()
						            };
						    
						            var navbar_sticky = document.getElementById("navbar_sticky");
						            var sticky = navbar_sticky.offsetTop;
						            var navbar_height = document.querySelector('.navbar').offsetHeight;
						    
						            function myFunction() {
						                if (window.pageYOffset >= sticky + navbar_height) {
						                    navbar_sticky.classList.add("sticky")
						                    document.body.style.paddingTop = navbar_height + 'px';
						                } else {
						                    navbar_sticky.classList.remove("sticky");
						                    document.body.style.paddingTop = '0'
						                }
						            }
						        </script>


				 <script>
								            document.addEventListener('DOMContentLoaded', function() {
								        var editButtons = document.querySelectorAll('.editBtn');
								    
								        editButtons.forEach(function(button) {
								            button.addEventListener('click', function() {
								                var commentContainer = button.closest('.comment-containercomment');
								                var commentContent = commentContainer.querySelector('.comment-content');
								                var commentId = commentContainer.dataset.commentId;
								    
								                commentContent.contentEditable = true;
								                commentContent.focus();
								    
								                var saveButton = document.createElement('button');
								                saveButton.textContent = 'Enregistrer';
								                saveButton.classList.add('saveBtn');
								                commentContainer.appendChild(saveButton);
								    
								                saveButton.addEventListener('click', function() {
								                    var newComment = commentContent.textContent.trim();
								                    commentContent.contentEditable = false;
								                    commentContainer.removeChild(saveButton);
								    
								                    console.log(newComment);
								    
								                    // Créer un objet contenant les données à envoyer
								                    var data = {
								                        contenu: newComment,
								                        commentId: commentId
								                    };
								    
								                    var xhr = new XMLHttpRequest();
								                    xhr.open('POST', '/commentaire/commentaireproduit/' + commentId + '/edit', true);
								                    xhr.setRequestHeader('Content-Type', 'application/json');
								                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
								                    xhr.onload = function() {
								                        if (xhr.status === 200) {
								                            var response = JSON.parse(xhr.responseText);
								                            console.log('Commentaire mis à jour avec succès', newComment);
								                            // Mettre à jour l'interface utilisateur avec le nouveau commentaire
								                            commentContent.textContent = newComment; 
								                        } else {
								                            console.error('Erreur lors de la mise à jour du commentaire');
								                        }
								                    };
								                    xhr.onerror = function() {
								                        console.error('Erreur lors de la mise à jour du commentaire');
								                    };
								                    // Convertir l'objet JavaScript en JSON avant de l'envoyer
								                    xhr.send(JSON.stringify(data));
								                });
								            });
								        });
								    });
								    
								    
								        </script>


				 <script>
								            document.addEventListener('DOMContentLoaded', function() {
								                var deleteButtons = document.querySelectorAll('.deleteBtn');
								                deleteButtons.forEach(function(button) {
								                    button.addEventListener('click', function() {
								                        var commentContainer = button.closest('.comment-containercomment');
								                        var reactionContainer = button.closest('.comment-react'); // Sélectionner l'élément .comment-react associé au commentaire
								                        var commentId = commentContainer.dataset.commentId;
								            
								                        // Envoyer une requête AJAX pour supprimer le commentaire
								                        var xhr = new XMLHttpRequest();
								                        xhr.open('POST', '/commentaire/commentaireproduit/' + commentId, true);
								                        xhr.setRequestHeader('Content-Type', 'application/json');
								                        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
								                        xhr.onload = function() {
								                            if (xhr.status === 200) {
								                                // Suppression réussie, masquer le commentaire et le réaction associée
								                                commentContainer.remove();
								                                if (reactionContainer) {
								                                    reactionContainer.remove(); // Supprimer le réaction associée si elle existe
								                                }
								                            } else {
								                                console.error('Erreur lors de la suppression du commentaire');
								                            }
								                        };
								                        xhr.onerror = function() {
								                            console.error('Erreur lors de la suppression du commentaire');
								                        };
								                        xhr.send();
								                    });
								                });
								            });
								            
								    
								        </script>


				 <script>
								        function showAlert(message) {
								    
								            var alertDiv = document.createElement('div');
								            alertDiv.classList.add('alert', 'alert-danger', 'alert-dismissible', 'fade', 'show');
								            alertDiv.setAttribute('role', 'alert');
								        
								            
								            alertDiv.innerHTML = '<strong>Attention !</strong> ' + message;
								        
								            
								            var closeButton = document.createElement('button');
								            closeButton.setAttribute('type', 'button');
								            closeButton.classList.add('btn-close');
								            closeButton.setAttribute('data-bs-dismiss', 'alert');
								            closeButton.setAttribute('aria-label', 'Close');
								            
								            
								            alertDiv.appendChild(closeButton);
								        
								            
								            var alertPlaceholder = document.getElementById('liveAlertPlaceholder');
								            alertPlaceholder.innerHTML = ''; 
								            alertPlaceholder.appendChild(alertDiv);
								        }
								    
								    
								    
								    document.getElementById('myForm').addEventListener('submit', function(event) {
								        event.preventDefault(); 
								    
								        
								        var quantiteDemandee = parseInt(document.getElementById('quantite').value);
								    
								        
								        var quantiteP = parseInt(document.querySelector('.btn-primary').getAttribute('data-quantite'));
								    
								        
								        var quantiteDansPanier = parseInt(document.querySelector('.btn-primary').getAttribute('data-quantite-panier'));
								    
								       
								        var quantiteTotale = quantiteP + quantiteDansPanier;
								    
								        
								        if (quantiteTotale < quantiteDemandee || quantiteTotale < 0) {
								         
								            showAlert('Stock insuffisant.');
								        } else {
								           
								            addToPanier();
								        }
								    });
								    
								    
								    
								        
								    </script>


			</body>
		{% endblock %}
